---
title: "Test Training Data Generation"
format: 
    html:
        embed-resources: true
editor_options: 
  chunk_output_type: console

---

```{r}
#| label: setup
#| message: false
library(terra)
library(sf)
library(tidyverse)
library(tidyterra)
library(leaflet)
library(knitr)

knitr::opts_knit$set(root.dir = "/Users/Anthony/Data and Analysis Local/NYS_Wetlands_GHG/")
knitr::opts_chunk$set(message = FALSE, cache = TRUE)

here::i_am("NWI_training_data.qmd")
library(here)

set.seed(11)
```


This is all data downloaded to a local folder 

- reprojection is used to harmonize between the different sources. Right now that is just the HUCs layer which was the largest

```{r}
ny_nwi <- vect("Data/NWI/NY_shapefile_wetlands/NY_Wetlands.shp") |> terra::project("EPSG:4269")
ny_state <- vect("Data/NWI/NY_shapefile_wetlands/New York.shp") |> terra::project("EPSG:4269")
ny_hucs_1 <- vect("Data/WBD_04_HU2_GPKG/WBD_04_HU2_GPKG.gpkg", layer = "WBDHU12") |> tidyterra::filter(str_detect(states, "NY"))
ny_hucs_2 <- vect("Data/WBD_02_HU2_GPKG/WBD_02_HU2_GPKG.gpkg", layer = "WBDHU12") |> tidyterra::filter(str_detect(states, "NY"))
ny_hucs_3 <- vect("Data/WBD_05_HU2_GPKG/WBD_05_HU2_GPKG.gpkg", layer = "WBDHU12") |> tidyterra::filter(str_detect(states, "NY"))
ny_hucs <- terra::union(ny_hucs_1, ny_hucs_2) |> terra::union(y = ny_hucs_3) |> 
    dplyr::select(!ends_with("_1")) |> 
    dplyr::select(!ends_with("_2"))
writeVector(ny_hucs, "Data/NY_HUCS/NY_HUCS_08.gpkg", overwrite = TRUE)
```

This is for one HUC

```{r}
test_huc <- ny_hucs |> dplyr::filter(str_detect(huc12, "020501020703"))
test_nwi_all <- ny_nwi |> terra::crop(y = test_huc) 
test_nwi_subset <- test_nwi_all |> 
    dplyr::filter(WETLAND_TY == "Freshwater Forested/Shrub Wetland" | WETLAND_TY == "Freshwater Emergent Wetland")
```


Create training data by `spatSample`ing the HUC and then extracting the wetland and upland points 

- The wetlands are just the Freshwater Forested/Shrub and the Freshwater Emergent
- The uplands are outside of all of the wetlands including surface water

The number of points could depend on the size of the Watershed 

```{r}
test_nwi_pts <- terra::spatSample(test_huc, method = "random", size = 1E4) # 1E4 = 10000
test_nwi_pts_wet <- terra::mask(test_nwi_pts, test_nwi_subset, inverse = FALSE) |> 
    terra::intersect(x = test_nwi_subset |> terra::buffer(-1)) |> # This attributes the points with NWI classes
    dplyr::mutate(MOD_CLASS = case_when(WETLAND_TY == "Freshwater Forested/Shrub Wetland" ~ "FSW",
                                        .default = "EMW"),
                  COARSE_CLASS = "WET") |>
    dplyr::select(MOD_CLASS, COARSE_CLASS)
test_nwi_pts_upl <- terra::mask(test_nwi_pts, test_nwi_all |> buffer(5), inverse = TRUE) |> 
    dplyr::mutate(MOD_CLASS = "UPL",
                  COARSE_CLASS = "UPL") |>
    dplyr::select(MOD_CLASS, COARSE_CLASS)

test_nwi_pts_all <- rbind(test_nwi_pts_upl, test_nwi_pts_wet)
glimpse(test_nwi_all)

test_nwi_pts_all |> as.data.frame() |>  dplyr::group_by(MOD_CLASS) |> dplyr::summarise(count = n())

```


Sometimes there are not enough points for a specific class. In this case this is EMW or emergent wetlands 

We can `spatSample` for more emergent from the NWI data layer. 

- This adds points but the size appears to be relative. So 1000 points ~ 150 actual points

What's better (I think...) is to convert the Emergent polygons to points then sub-sample 500 of them. 

- Or the number of polygons which could/could not be a good idea

```{r}
numEMW <- length(test_nwi_subset[test_nwi_subset$WETLAND_TY == "Freshwater Emergent Wetland"])
suppPoints <- test_nwi_subset |> 
    dplyr::filter(str_detect(WETLAND_TY, "Emergent")) |>
    terra::buffer(-10) |> # a negative buffer should remove points on the lines
    terra::as.points() |> 
    sample(size = c(numEMW, 100)[which.max(c(numEMW, 100))])  |> 
    dplyr::mutate(MOD_CLASS = "EMW",
                  COARSE_CLASS = "WET") |> 
    dplyr::select(MOD_CLASS, COARSE_CLASS) 

test_nwi_pts_all_supp <- rbind(test_nwi_pts_all, suppPoints)

test_nwi_pts_all_supp |> as.data.frame() |>  dplyr::group_by(MOD_CLASS) |> dplyr::summarise(count = n())
```

This is a visualization to show the points and NWI polygons

```{r}

s <- svc(test_nwi_subset, test_nwi_pts_all_supp)
names(s) <- c("Wetland Polygons", "Wetland Points")
plet(s, c("WETLAND_TY", "MOD_CLASS"))

```


Write the points data to a file

```{r}


writeVector(test_huc, "Data/NY_HUCS/Middle_Genegantslet_020501020703.gpkg", overwrite = TRUE)
writeVector(test_nwi_pts_all_supp, "Data/Training_Data/test_nwi_pts_all_supp.gpkg", overwrite = TRUE)

```

